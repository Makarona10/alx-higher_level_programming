The ``2-matrix_divided`` Module
===============================

Using the ``matrix_divided`` function
=====================================

::
Importing the module->
    >>>matrix_divided = __import__("2-matrix_divided").matrix_divided

Start the test.

Checks for the documentation of the module->
::

    >>>doc_size = __import__('2-matrix_divided').__doc__
    >>>len(doc_size) > 5
    True

-----------------------------------------------------
Checks for the function documentation->
::

    >>>func_doc = matrix_divided.__doc__
    >>>len(func_doc) > 5
    True

-----------------------------------------------------
Tests in case the 2D matrix is empty->
::

    >>>matrix_divided([[]], 1)
    >>>[[]]
-----------------------------------------------------
Test if the list has a string->
::

    >>>matrix_divided([[1, 5], "damn"], 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
-----------------------------------------------------
Tests if the size of internal lists wasn't equal->
::

    >>>matrix_divided([[1, 5], [3, 5, 6]])
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

-----------------------------------------------------
Tests if the divisor is 0 ->
::
    >>>matrix_divided([[1, 5], [3, 5]], 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

-----------------------------------------------------
Tests if the function works well->
::
    >>>matrix_divided([[1, 5], [3, 5]], 2)
    [[0.5, 2.5], [1.5, 2.5]]

    >>>matrix_divided([[95, 5, 332], [10215465465, 9998104, 1]], 2)
    [[47.5, 2.5, 166.0], [5107732732.5, 4999052.0, 0.5]]

------------------------------------------------------
Chechs for the internal lists types ->
::

    >>>matrix_divided([[95, 5, "332"], [43, 4, 1]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

------------------------------------------------------
Checks the function with average lists (Floats & integers) ->
::
        >>> mtrx = [
        ... [1, 2, 3],
        ... [4, 5, 6]
        ... ] #doctest: +NORMALIZE_WHITESPACE
        >>> matrix_divided(mtrx, 3) #doctest: +NORMALIZE_WHITESPACE
        [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
        >>> mtrx = [[4, 8, 12]]
        >>> matrix_divided(mtrx, 2)
        [[2.0, 4.0, 6.0]]
        >>> mtrx = [
        ...      [2.2, 4.4, 6.6],
        ...      [8.2, 6.2, 10]
        ... ] #doctest: +NORMALIZE_WHITESPACE
        >>> matrix_divided(mtrx, 2)
        [[1.1, 2.2, 3.3], [4.1, 3.1, 5.0]]

-----------------------------------------------------
checks when None is passed ->
::
  
        >>> matrix_divided([[1, 2, 4]], None)
        Traceback (most recent call last):
        ...
        TypeError: div must be a number
        >>> matrix_divided(None, 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------------------------------
Checks when boolean is passed ->
::

    >>>matrix_divided([[1, 2, 4]], True)
    Traceback (most recent call last):
        ...
    TypeError: div must be a number
    
    >>>matrix_divided(False, 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------------------------------
checks when different datatypes passed ->
::

    >>>matrix_divided(([1, 2, 4], [1, 22, 8]), 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>>matrix_divided("HAHAHA", 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>>matrix_divided({"Name": "Ayman hefny"}, 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>>matrix_divided(5524, 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>>matrix_divided([{"Serie": "TWD"}, [1, 6, 4]], 1)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

---------------------------------------------------------
Checks when only 1 argument is passed ->
::

    >>>matrix_divided([[1, 5, 6], [1, 6, 4]])
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

    >>>matrix_divided()
    Traceback (most recent call last):
        ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
    